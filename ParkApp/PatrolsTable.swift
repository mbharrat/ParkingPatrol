//
//  PatrolsTable.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.2
//

import Foundation
import UIKit
import AWSDynamoDB
import AWSMobileHubHelper

class PatrolsTable: NSObject, Table {
    typealias FinishedScan = () -> ()
    var tableName: String
    var partitionKeyName: String
    var partitionKeyType: String
    var sortKeyName: String?
    var sortKeyType: String?
    var model: AWSDynamoDBObjectModel
    var indexes: [Index]
    var orderedAttributeKeys: [String] {
        return produceOrderedAttributeKeys(model)
    }
    var tableDisplayName: String {
        
        return "Patrols"
    }
    
    override init() {
        
        model = Patrols()
        
        tableName = model.classForCoder.dynamoDBTableName()
        partitionKeyName = model.classForCoder.hashKeyAttribute()
        partitionKeyType = "String"
        indexes = [
            
            PatrolsTimeExisted(),
        ]
        if (model.classForCoder.respondsToSelector("rangeKeyAttribute")) {
            sortKeyName = model.classForCoder.rangeKeyAttribute!()
        }
        super.init()
    }
    
    /**
     * Converts the attribute name from data object format to table format.
     *
     * - parameter dataObjectAttributeName: data object attribute name
     * - returns: table attribute name
     */
    //custom func to update an array with coordinates
    func updateMap(item: AWSDynamoDBObjectModel, completionHandler: (error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        PatrolsTable().scanWithCompletionHandler { (response, error) in
            if error != nil {
                print("no patrols in table")
            }else{
                let output = response
                var p = 0
                while p < output!.items.count {
                    // print("--------------------------")
                    // print(output!.items[p])
                    // print("--------------------------")
                    p = p + 1
                }
                
                if output!.items.count == 0{
                    print("no patrols exist")
                }else{
                    var i = 0
                    //coordinateArrLong.append(23)
                    while i < output!.items.count{
                        let itemToUpdate: Patrols = output!.items[i] as! Patrols
                        // print("--------------------------")
                        //print(itemToUpdate)
                        //print(output!.items.count)
                        //print("--------------------------")
                        
                        coordinateArrLat.append(itemToUpdate._latitude as! Double)
                        coordinateArrLong.append (itemToUpdate._longitude as! Double)
                        // print(coordinateArrLat[i])
                        // print(coordinateArrLong[i])
                        // print(coordinateArrLat.count)
                        objectMapper.save(itemToUpdate, completionHandler: {(error: NSError?) -> Void in
                            dispatch_async(dispatch_get_main_queue(), {
                                completionHandler(error: error)
                            })
                        })
                        i = i + 1
                    }
                }
            }
        }
    }
    func tableAttributeName(dataObjectAttributeName: String) -> String {
        return Patrols.JSONKeyPathsByPropertyKey()[dataObjectAttributeName] as! String
    }
    
    func getItemDescription() -> String {
        return "Find Item with time = \("demo-time-500000")."
    }
    
    func getItemWithCompletionHandler(completionHandler: (response: AWSDynamoDBObjectModel?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        objectMapper.load(Patrols.self, hashKey: "demo-time-500000", rangeKey: nil, completionHandler: {(response: AWSDynamoDBObjectModel?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func scanDescription() -> String {
        return "Show all items in the table."
    }
    
    func scanWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let scanExpression = AWSDynamoDBScanExpression()
        //limits how populated map will be
        //prior to check, only set to 5 so only 5 patrols populated
        scanExpression.limit = 100
        
        objectMapper.scan(Patrols.self, expression: scanExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func scanWithFilterDescription() -> String {
        return "Find all items with latitude < \(1111500000)."
    }
    
    func scanWithFilterWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let scanExpression = AWSDynamoDBScanExpression()
        
        scanExpression.filterExpression = "#latitude"
        scanExpression.expressionAttributeNames = ["#latitude": "latitude" ,]
        
        objectMapper.scan(Patrols.self, expression: scanExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func insertSampleDataWithCompletionHandler(completionHandler: (errors: [NSError]?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        var errors: [NSError] = []
        let group: dispatch_group_t = dispatch_group_create()
        
        
        let itemForGet = Patrols()
        
        itemForGet._time = timeStamp
        itemForGet._latitude = patrolLat
        itemForGet._longitude = patrolLong
        
        
        dispatch_group_enter(group)
        
        
        objectMapper.save(itemForGet, completionHandler: {(error: NSError?) -> Void in
            if error != nil {
                dispatch_async(dispatch_get_main_queue(), {
                    errors.append(error!)
                })
            }
            dispatch_group_leave(group)
        })
        
        dispatch_group_notify(group, dispatch_get_main_queue(), {
            if errors.count > 0 {
                completionHandler(errors: errors)
            }
            else {
                completionHandler(errors: nil)
            }
        })
    }
    
    func removeSampleDataWithCompletionHandler(completionHandler: (errors: [NSError]?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let scanExpression = AWSDynamoDBScanExpression()
        scanExpression.filterExpression = "begins_with(#time, :time)"
        scanExpression.expressionAttributeNames = ["#time": "time"]
        scanExpression.expressionAttributeValues = [":time": "demo-"]
        
        objectMapper.scan(Patrols.self, expression: scanExpression) { (response: AWSDynamoDBPaginatedOutput?, error: NSError?) in
            if let error = error {
                dispatch_async(dispatch_get_main_queue(), {
                    completionHandler(errors: [error]);
                })
            } else {
                var errors: [NSError] = []
                let group: dispatch_group_t = dispatch_group_create()
                for item in response!.items {
                    dispatch_group_enter(group)
                    objectMapper.remove(item, completionHandler: {(error: NSError?) -> Void in
                        if error != nil {
                            dispatch_async(dispatch_get_main_queue(), {
                                errors.append(error!)
                            })
                        }
                        dispatch_group_leave(group)
                    })
                }
                dispatch_group_notify(group, dispatch_get_main_queue(), {
                    if errors.count > 0 {
                        completionHandler(errors: errors)
                    }
                    else {
                        completionHandler(errors: nil)
                    }
                })
            }
        }
    }
    
    func updateItem(item: AWSDynamoDBObjectModel, completionHandler: (error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        
        
        let itemToUpdate: Patrols = item as! Patrols
        
        // itemToUpdate._latitude = NoSQLSampleDataGenerator.randomSampleNumber()
        // itemToUpdate._longitude = NoSQLSampleDataGenerator.randomSampleNumber()
        
        objectMapper.save(itemToUpdate, completionHandler: {(error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(error: error)
            })
        })
    }
    
    func removeItem(item: AWSDynamoDBObjectModel, completionHandler: (error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        
        objectMapper.remove(item, completionHandler: {(error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(error: error)
            })
        })
    }
}

class PatrolsTimeExisted: NSObject, Index {
    
    var indexName: String? {
        
        return "timeExisted"
    }
    
    func supportedOperations() -> [String] {
        return [
            QueryWithPartitionKey,
            QueryWithPartitionKeyAndFilter,
        ]
    }
    
    func queryWithPartitionKeyDescription() -> String {
        return "Find all items with time = \("demo-time-3")."
    }
    
    func queryWithPartitionKeyWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let queryExpression = AWSDynamoDBQueryExpression()
        
        
        queryExpression.indexName = "timeExisted"
        queryExpression.keyConditionExpression = "#time = :time"
        queryExpression.expressionAttributeNames = ["#time": "time",]
        queryExpression.expressionAttributeValues = [":time": "demo-time-3",]
        
        objectMapper.query(Patrols.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func queryWithPartitionKeyAndFilterDescription() -> String {
        return "Find all items with time = \("demo-time-3") and latitude > \(1111500000)."
    }
    
    func queryWithPartitionKeyAndFilterWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let queryExpression = AWSDynamoDBQueryExpression()
        
        
        queryExpression.indexName = "timeExisted"
        queryExpression.keyConditionExpression = "#time = :time"
        queryExpression.filterExpression = "#latitude > :latitude"
        queryExpression.expressionAttributeNames = [
            "#time": "time",
            "#latitude": "latitude",
        ]
        queryExpression.expressionAttributeValues = [
            ":time": "demo-time-3",
            ":latitude": 1111500000,
        ]
        
        
        objectMapper.query(Patrols.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    
}
